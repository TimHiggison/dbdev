/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/accounts": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.accounts.id"];
          username?: parameters["rowFilter.accounts.username"];
          avatar_id?: parameters["rowFilter.accounts.avatar_id"];
          display_name?: parameters["rowFilter.accounts.display_name"];
          bio?: parameters["rowFilter.accounts.bio"];
          contact_email?: parameters["rowFilter.accounts.contact_email"];
          created_at?: parameters["rowFilter.accounts.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["accounts"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** accounts */
          accounts?: definitions["accounts"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.accounts.id"];
          username?: parameters["rowFilter.accounts.username"];
          avatar_id?: parameters["rowFilter.accounts.avatar_id"];
          display_name?: parameters["rowFilter.accounts.display_name"];
          bio?: parameters["rowFilter.accounts.bio"];
          contact_email?: parameters["rowFilter.accounts.contact_email"];
          created_at?: parameters["rowFilter.accounts.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.accounts.id"];
          username?: parameters["rowFilter.accounts.username"];
          avatar_id?: parameters["rowFilter.accounts.avatar_id"];
          display_name?: parameters["rowFilter.accounts.display_name"];
          bio?: parameters["rowFilter.accounts.bio"];
          contact_email?: parameters["rowFilter.accounts.contact_email"];
          created_at?: parameters["rowFilter.accounts.created_at"];
        };
        body: {
          /** accounts */
          accounts?: definitions["accounts"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/members": {
    get: {
      parameters: {
        query: {
          organization_id?: parameters["rowFilter.members.organization_id"];
          account_id?: parameters["rowFilter.members.account_id"];
          role?: parameters["rowFilter.members.role"];
          created_at?: parameters["rowFilter.members.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["members"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** members */
          members?: definitions["members"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          organization_id?: parameters["rowFilter.members.organization_id"];
          account_id?: parameters["rowFilter.members.account_id"];
          role?: parameters["rowFilter.members.role"];
          created_at?: parameters["rowFilter.members.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          organization_id?: parameters["rowFilter.members.organization_id"];
          account_id?: parameters["rowFilter.members.account_id"];
          role?: parameters["rowFilter.members.role"];
          created_at?: parameters["rowFilter.members.created_at"];
        };
        body: {
          /** members */
          members?: definitions["members"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/organizations": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.organizations.id"];
          username?: parameters["rowFilter.organizations.username"];
          avatar_id?: parameters["rowFilter.organizations.avatar_id"];
          display_name?: parameters["rowFilter.organizations.display_name"];
          bio?: parameters["rowFilter.organizations.bio"];
          contact_email?: parameters["rowFilter.organizations.contact_email"];
          created_at?: parameters["rowFilter.organizations.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["organizations"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** organizations */
          organizations?: definitions["organizations"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.organizations.id"];
          username?: parameters["rowFilter.organizations.username"];
          avatar_id?: parameters["rowFilter.organizations.avatar_id"];
          display_name?: parameters["rowFilter.organizations.display_name"];
          bio?: parameters["rowFilter.organizations.bio"];
          contact_email?: parameters["rowFilter.organizations.contact_email"];
          created_at?: parameters["rowFilter.organizations.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.organizations.id"];
          username?: parameters["rowFilter.organizations.username"];
          avatar_id?: parameters["rowFilter.organizations.avatar_id"];
          display_name?: parameters["rowFilter.organizations.display_name"];
          bio?: parameters["rowFilter.organizations.bio"];
          contact_email?: parameters["rowFilter.organizations.contact_email"];
          created_at?: parameters["rowFilter.organizations.created_at"];
        };
        body: {
          /** organizations */
          organizations?: definitions["organizations"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/package_versions": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.package_versions.id"];
          slug?: parameters["rowFilter.package_versions.slug"];
          version?: parameters["rowFilter.package_versions.version"];
          package_id?: parameters["rowFilter.package_versions.package_id"];
          object_id?: parameters["rowFilter.package_versions.object_id"];
          object_key?: parameters["rowFilter.package_versions.object_key"];
          upload_metadata?: parameters["rowFilter.package_versions.upload_metadata"];
          created_at?: parameters["rowFilter.package_versions.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["package_versions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
  };
  "/packages": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.packages.id"];
          slug?: parameters["rowFilter.packages.slug"];
          username?: parameters["rowFilter.packages.username"];
          name?: parameters["rowFilter.packages.name"];
          created_at?: parameters["rowFilter.packages.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["packages"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
  };
  "/rpc/create_organization": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            display_name?: string;
            /** Format: extensions.citext */
            contact_email?: string;
            /** Format: uuid */
            avatar_id?: string;
            /** Format: text */
            bio?: string;
            /** Format: app.valid_name */
            username: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/is_username_available": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: app.valid_name */
            username: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/publish_package_version": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: json */
            body: string;
            /** Format: character varying */
            object_name: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  accounts: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id?: string;
    /** Format: app.valid_name */
    username?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `objects.id`.<fk table='objects' column='id'/>
     */
    avatar_id?: string;
    /** Format: character varying */
    display_name?: string;
    /** Format: character varying */
    bio?: string;
    /** Format: app.email_address */
    contact_email?: string;
    /** Format: timestamp without time zone */
    created_at?: string;
  };
  members: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `organizations.id`.<fk table='organizations' column='id'/>
     */
    organization_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `accounts.id`.<fk table='accounts' column='id'/>
     */
    account_id?: string;
    /**
     * Format: app.membership_role
     * @enum {string}
     */
    role?: "maintainer";
    /** Format: timestamp without time zone */
    created_at?: string;
  };
  organizations: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id?: string;
    /** Format: app.valid_name */
    username?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `objects.id`.<fk table='objects' column='id'/>
     */
    avatar_id?: string;
    /** Format: character varying */
    display_name?: string;
    /** Format: character varying */
    bio?: string;
    /** Format: app.email_address */
    contact_email?: string;
    /** Format: timestamp without time zone */
    created_at?: string;
  };
  package_versions: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id?: string;
    /** Format: text */
    slug?: string;
    /** Format: text */
    version?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `packages.id`.<fk table='packages' column='id'/>
     */
    package_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `objects.id`.<fk table='objects' column='id'/>
     */
    object_id?: string;
    /** Format: text */
    object_key?: string;
    /** Format: jsonb */
    upload_metadata?: string;
    /** Format: timestamp without time zone */
    created_at?: string;
  };
  packages: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id?: string;
    /** Format: text */
    slug?: string;
    /** Format: app.valid_name */
    username?: string;
    /** Format: app.valid_name */
    name?: string;
    /** Format: timestamp without time zone */
    created_at?: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description accounts */
  "body.accounts": definitions["accounts"];
  /** Format: uuid */
  "rowFilter.accounts.id": string;
  /** Format: app.valid_name */
  "rowFilter.accounts.username": string;
  /** Format: uuid */
  "rowFilter.accounts.avatar_id": string;
  /** Format: character varying */
  "rowFilter.accounts.display_name": string;
  /** Format: character varying */
  "rowFilter.accounts.bio": string;
  /** Format: app.email_address */
  "rowFilter.accounts.contact_email": string;
  /** Format: timestamp without time zone */
  "rowFilter.accounts.created_at": string;
  /** @description members */
  "body.members": definitions["members"];
  /** Format: uuid */
  "rowFilter.members.organization_id": string;
  /** Format: uuid */
  "rowFilter.members.account_id": string;
  /** Format: app.membership_role */
  "rowFilter.members.role": string;
  /** Format: timestamp without time zone */
  "rowFilter.members.created_at": string;
  /** @description organizations */
  "body.organizations": definitions["organizations"];
  /** Format: uuid */
  "rowFilter.organizations.id": string;
  /** Format: app.valid_name */
  "rowFilter.organizations.username": string;
  /** Format: uuid */
  "rowFilter.organizations.avatar_id": string;
  /** Format: character varying */
  "rowFilter.organizations.display_name": string;
  /** Format: character varying */
  "rowFilter.organizations.bio": string;
  /** Format: app.email_address */
  "rowFilter.organizations.contact_email": string;
  /** Format: timestamp without time zone */
  "rowFilter.organizations.created_at": string;
  /** @description package_versions */
  "body.package_versions": definitions["package_versions"];
  /** Format: uuid */
  "rowFilter.package_versions.id": string;
  /** Format: text */
  "rowFilter.package_versions.slug": string;
  /** Format: text */
  "rowFilter.package_versions.version": string;
  /** Format: uuid */
  "rowFilter.package_versions.package_id": string;
  /** Format: uuid */
  "rowFilter.package_versions.object_id": string;
  /** Format: text */
  "rowFilter.package_versions.object_key": string;
  /** Format: jsonb */
  "rowFilter.package_versions.upload_metadata": string;
  /** Format: timestamp without time zone */
  "rowFilter.package_versions.created_at": string;
  /** @description packages */
  "body.packages": definitions["packages"];
  /** Format: uuid */
  "rowFilter.packages.id": string;
  /** Format: text */
  "rowFilter.packages.slug": string;
  /** Format: app.valid_name */
  "rowFilter.packages.username": string;
  /** Format: app.valid_name */
  "rowFilter.packages.name": string;
  /** Format: timestamp without time zone */
  "rowFilter.packages.created_at": string;
}

export interface operations {}

export interface external {}
